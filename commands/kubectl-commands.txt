kubectl get nodes

# get yaml or json of existing kube object
kubectl get object object_name -o yaml

# pods
kubectl get pods [ options(--show-labels) ]
kubectl run pod_name --image=img_name --port=[ephimeral port]
kubectl descibe pod pod_name
kubectl delete pod pod_name
kubectl delete pod --all (delete all pods)

# execute container running inside a pod
kubectl exec -it pod_name [bash / sh / supported commands]

# execute container if a pod hosts multiple container
kubectl exec -it pod_name -c container_name [bash / sh / supported commands]

# cli api docs
kubectl explain object_name (pod, service) . [options (spec, containers)]

# generate kubernetes object manifest file (yaml/json)
kubectl run nginx --image=nginx --dry-run=client -o [ yaml / json ] 

# label
kubectl run nginx --image=nginx --labels env=prod (new)
kubectl label pods pod_name env=prod (existing pod)

# selector
kubectl get pods -l env=prod
kubectl get pods -l env!=prod (conditional operator)

# replicaset
kubectl get replicaset [ can use shortname -> rs ]
kubectl delete rs rs_name

# create object from yaml
kubectl apply -f yaml_file_name.yaml

# deployment
kubectl create deployment deployment_name --image= img_name

kubectl get deployment
kubectl describe deployment deployment_name
kubectl rollout history deployment.v1.apps/frontend-deployment (kube maintains revisions) or kubectl rollout history deployment deployment_name
kubectl rollout history deployment.v1.apps/frontend-deployment --revision 1 (revision_number, it will return more info)
kubectl rollout undo deployment.v1.apps/frontend-deployment --to-revision=1 (roll out to given version)

# update object in existing deployment
kubectl set image deployment deployment_name container_name = new_image --record (update image) 
kubectl scale deployment deployment_name --replicas 10 (scale deployment)
kubectl rollout undo deployment deployment_name (rollout undo)

# Taint and Toleration
kubectl taint nodes node_name key=value:EffectName -> (NoSchedule)
kubectl taint nodes node_name key=value:EffectName- (Un-taint a node)


# proxy
kubectl proxy --port 8080 (launches in localhost)
kubectl proxy --address='0.0.0.0' --port=8081 --accept-hosts='.*' (open to internet)
kubectl proxy --address='0.0.0.0' --port=8081 --accept-hosts='.*' & (runs proxy in background)
{
  To stop background process
  - jobs
  - kill %(job_id)
}

kubectl port-forward mongo-75f59d57f4-4nd6q 28015:27017
( works with pod, deployment, replica set, service )
